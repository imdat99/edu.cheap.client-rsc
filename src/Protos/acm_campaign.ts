// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: Protos/acm_campaign.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Timestamp } from "../google/protobuf/timestamp";
import { Int32Value, StringValue } from "../google/protobuf/wrappers";

export const protobufPackage = "";

export interface HelloRequest {
  name: string;
}

export interface Campaign {
  id: number;
  name: string;
  createdDate: Date | undefined;
  ownerWorkspaceId: number;
  directoryPath: string | undefined;
}

function createBaseHelloRequest(): HelloRequest {
  return { name: "" };
}

export const HelloRequest: MessageFns<HelloRequest> = {
  encode(message: HelloRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HelloRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHelloRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HelloRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: HelloRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HelloRequest>, I>>(base?: I): HelloRequest {
    return HelloRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HelloRequest>, I>>(object: I): HelloRequest {
    const message = createBaseHelloRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCampaign(): Campaign {
  return { id: 0, name: "", createdDate: undefined, ownerWorkspaceId: 0, directoryPath: undefined };
}

export const Campaign: MessageFns<Campaign> = {
  encode(message: Campaign, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.createdDate !== undefined) {
      Timestamp.encode(toTimestamp(message.createdDate), writer.uint32(26).fork()).join();
    }
    if (message.ownerWorkspaceId !== 0) {
      writer.uint32(32).int32(message.ownerWorkspaceId);
    }
    if (message.directoryPath !== undefined) {
      StringValue.encode({ value: message.directoryPath! }, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Campaign {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCampaign();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.createdDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.ownerWorkspaceId = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.directoryPath = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Campaign {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createdDate: isSet(object.createdDate) ? fromJsonTimestamp(object.createdDate) : undefined,
      ownerWorkspaceId: isSet(object.ownerWorkspaceId) ? globalThis.Number(object.ownerWorkspaceId) : 0,
      directoryPath: isSet(object.directoryPath) ? String(object.directoryPath) : undefined,
    };
  },

  toJSON(message: Campaign): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createdDate !== undefined) {
      obj.createdDate = message.createdDate.toISOString();
    }
    if (message.ownerWorkspaceId !== 0) {
      obj.ownerWorkspaceId = Math.round(message.ownerWorkspaceId);
    }
    if (message.directoryPath !== undefined) {
      obj.directoryPath = message.directoryPath;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Campaign>, I>>(base?: I): Campaign {
    return Campaign.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Campaign>, I>>(object: I): Campaign {
    const message = createBaseCampaign();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    message.createdDate = object.createdDate ?? undefined;
    message.ownerWorkspaceId = object.ownerWorkspaceId ?? 0;
    message.directoryPath = object.directoryPath ?? undefined;
    return message;
  },
};

export type AcmCampaignService = typeof AcmCampaignService;
export const AcmCampaignService = {
  getCampaignById: {
    path: "/AcmCampaign/GetCampaignById",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: number | undefined): Buffer =>
      Buffer.from(Int32Value.encode({ value: value ?? 0 }).finish()),
    requestDeserialize: (value: Buffer): number | undefined => Int32Value.decode(value).value,
    responseSerialize: (value: Campaign): Buffer => Buffer.from(Campaign.encode(value).finish()),
    responseDeserialize: (value: Buffer): Campaign => Campaign.decode(value),
  },
} as const;

export interface AcmCampaignServer extends UntypedServiceImplementation {
  getCampaignById: handleUnaryCall<number | undefined, Campaign>;
}

export interface AcmCampaignClient extends Client {
  getCampaignById(
    request: number | undefined,
    callback: (error: ServiceError | null, response: Campaign) => void,
  ): ClientUnaryCall;
  getCampaignById(
    request: number | undefined,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Campaign) => void,
  ): ClientUnaryCall;
  getCampaignById(
    request: number | undefined,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Campaign) => void,
  ): ClientUnaryCall;
}

export const AcmCampaignClient = makeGenericClientConstructor(AcmCampaignService, "AcmCampaign") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): AcmCampaignClient;
  service: typeof AcmCampaignService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
